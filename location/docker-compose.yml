version: '3.9'
services:
  api_location1:
    build: { context: ./backend/location1, target: dev }
    container_name: api_location1
    env_file: ./backend/location1/.env
    volumes:
      - ./backend/location1/app:/code
    environment: 
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - '8000:80'
    restart: unless-stopped

  api_location2:
    build: { context: ./backend/location2, target: dev }
    container_name: api_location2
    env_file: ./backend/location2/.env
    volumes:
      - ./backend/location2/app:/code
    environment: 
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - '8001:80'
    restart: unless-stopped

  front_location1:
    build: { context: ./frontend/location1, target: dev }
    container_name: front_location1
    volumes:
      - ./frontend/location1/app:/app
      - front_location1_node_modules:/app/node_modules
    environment: 
      CHOKIDAR_USEPOLLING: "true"
    env_file: ./frontend/location1/.env
    command: npm run dev -- --host 0.0.0.0
    ports:
      - '5173:5173'
    restart: unless-stopped

  front_location2:
    build: { context: ./frontend/location2, target: dev }
    container_name: front_location2
    volumes:
      - ./frontend/location2/app:/app
      - front_location2_node_modules:/app/node_modules
    environment: 
      CHOKIDAR_USEPOLLING: "true"
    env_file: ./frontend/location2/.env
    command: npm run dev -- --host 0.0.0.0
    ports:
      - '3000:3000'
    restart: unless-stopped

  proxy:
    image: nginx:1.27-alpine
    container_name: location_proxy
    ports: [ '80:80' ]
    volumes:
      - ./nginx_dev/conf.d:/etc/nginx/conf.d:ro
      - ./nginx_dev/proxy_params:/etc/nginx/proxy_params:ro
    depends_on: [api_location1, api_location2, front_location1, front_location2]
    restart: unless-stopped

volumes:
  front_location1_node_modules:
  front_location2_node_modules:
